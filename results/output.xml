<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0 (Python 3.8.0 on win32)" generated="20220506 20:48:38.019" rpa="false" schemaversion="3">
<suite id="s1" name="Usuarios" source="C:\STC\robot-api-stc\tests\usuarios">
<suite id="s1-s1" name="TestUsuarios" source="C:\STC\robot-api-stc\tests\usuarios\TestUsuarios.robot">
<kw name="Connect API" library="UsuarioKW" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serveRest</arg>
<arg>${URL_API_EXTERNAL}</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20220506 20:48:38.472" level="INFO">Creating Session using : alias=serveRest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220506 20:48:38.471" endtime="20220506 20:48:38.473"/>
</kw>
<status status="PASS" starttime="20220506 20:48:38.470" endtime="20220506 20:48:38.473"/>
</kw>
<test id="s1-s1-t1" name="CT01: List Users registered" line="11">
<kw name="List all users" library="UsuarioKW">
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:38.479" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:38.477" endtime="20220506 20:48:38.479"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios</arg>
<arg>headers=${header}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:39.449" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20220506 20:48:39.450" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '7204eff6-4e31-4b4f-a14a-10ee692cb298', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c3adc6acb10ef09cf80aed7dc2501e67;o=1', 'Date': 'Fri, 06 May 2022 23:49:24 GMT', 'Server': 'Google Frontend', 'Content-Length': '22489'} 
 body={
    "quantidade": 104,
    "usuarios": [
        {
            "email": "shawnna.ebert@gmail.com",
            "password": "teste",
            "nome": "Alexander Donnelly",
            "administrador": "true",
            "_id": "0nzZ5FrXJsWvaZHT"
        },
        {
            "email": "shelli.gibson@gmail.com",
            "password": "teste",
            "nome": "Abe Larson",
            "administrador": "true",
            "_id": "0u8ignFg7uF0P1QM"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "email": "eduardo.white@gmail.com",
            "password": "teste",
            "nome": "Julienne Kirlin MD",
            "administrador": "true",
            "_id": "1XWezNXdLt1qgKJ7"
        },
        {
            "nome": "Testeee um",
            "email": "beltrano1234567899@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "1ZVjeaxDrD77dqEH"
        },
        {
            "email": "amado.cruickshank@gmail.com",
            "password": "teste",
            "nome": "Gwyneth Kerluke",
            "administrador": "true",
            "_id": "3HZoTq3vQWbtYELk"
        },
        {
            "email": "deidre.kutch@hotmail.com",
            "password": "teste",
            "nome": "Deshawn Baumbach MD",
            "administrador": "true",
            "_id": "3cpBVH3loI64FyS0"
        },
        {
            "email": "jacquie.kunze@yahoo.com",
            "password": "teste",
            "nome": "Mr. Milton Kovacek",
            "administrador": "true",
            "_id": "6kh0bhAq7aFNxNQa"
        },
        {
            "email": "oswaldo.ondricka@gmail.com",
            "password": "teste",
            "nome": "Janell Lemke",
            "administrador": "true",
            "_id": "7WYSnyIxE5ovxibO"
        },
        {
            "email": "aldo.jacobson@hotmail.com",
            "password": "teste",
            "nome": "Estefana Moen",
            "administrador": "true",
            "_id": "7e97ozv3VXzV7oIu"
        },
        {
            "email": "lorita.greenfelder@gmail.com",
            "password": "teste",
            "nome": "Selena Runte",
            "administrador": "false",
            "_id": "8AWWE0uGK9NGA30v"
        },
        {
            "email": "clifton.corkery@gmail.com",
            "password": "teste",
            "nome": "Jude Gleason",
            "administrador": "true",
            "_id": "A4Tqwl7jmTw8UlEd"
        },
        {
            "email": "alvina.gutkowski@gmail.com",
            "password": "teste",
            "nome": "Spencer Purdy",
            "administrador": "true",
            "_id": "ACJBU5FEwR5UW5ru"
        },
        {
            "email": "glenn.kihn@hotmail.com",
            "password": "teste",
            "nome": "Pia Beahan",
            "administrador": "true",
            "_id": "AXjX2Ltag0PRqplF"
        },
        {
            "email": "morton.beier@gmail.com",
            "password": "teste",
            "nome": "Margaretta Wiegand",
            "administrador": "true",
            "_id": "BESZP8FqJIqX7M4J"
        },
        {
            "email": "versie.bailey@hotmail.com",
            "password": "teste",
            "nome": "Jacquie Graham",
            "administrador": "true",
            "_id": "C8yXEVauJ4gdgwWf"
        },
        {
            "email": "althea.watsica@yahoo.com",
            "password": "teste",
            "nome": "Ms. Sherry McCullough",
            "administrador": "true",
            "_id": "C9Wk8m3RE5ifPXol"
        },
        {
            "email": "manuela.wisozk@hotmail.com",
            "password": "teste",
            "nome": "Maurice Denesik",
            "administrador": "true",
            "_id": "E772FO0ZO0U0Xoov"
        },
        {
            "email": "santo.stroman@gmail.com",
            "password": "teste",
            "nome": "Tracy Gerhold",
            "administrador": "true",
            "_id": "EHJA62DqDrJRYBWK"
        },
        {
            "email": "carl.auer@gmail.com",
            "password": "teste",
            "nome": "Craig Langworth",
            "administrador": "true",
            "_id": "FPHzzXtHu5swzoMc"
        },
        {
            "email": "arnulfo.weimann@hotmail.com",
            "password": "teste",
            "nome": "Gisele Langosh Jr.",
            "administrador": "true",
            "_id": "FiIRePLkdr3iWoG7"
        },
        {
            "email": "kevin.wiegand@yahoo.com",
            "password": "teste",
            "nome": "Lucinda Considine",
            "administrador": "true",
            "_id": "GW0J3j2r3mLjW0B5"
        },
        {
            "email": "raleigh.walsh@gmail.com",
            "password": "teste",
            "nome": "Alida Denesik",
            "administrador": "true",
            "_id": "HvhKJlgnboK3Q5Qw"
        },
        {
            "email": "stacy.grady@gmail.com",
            "password": "teste",
            "nome": "Rosalinda Gottlieb Sr.",
            "administrador": "true",
            "_id": "I0IcFz4vtgwzpELB"
        },
        {
            "email": "sang.crist@gmail.com",
            "password": "teste",
            "nome": "Melodi Gutmann",
            "administrador": "false",
            "_id": "I459pWBPlAlftJRQ"
        },
        {
            "email": "joesph.kihn@gmail.com",
            "password": "teste",
            "nome": "Hang Dickinson",
            "administrador": "false",
            "_id": "IZCyLQ7qnq16ugVg"
        },
        {
            "email": "joshua.mayert@hotmail.com",
            "password": "teste",
            "nome": "Willy Christiansen",
            "administrador": "true",
            "_id": "IdlQsKnr5747SIT7"
        },
        {
            "email": "bradly.berge@gmail.com",
            "password": "teste",
            "nome": "Jerold Towne",
            "administrador": "false",
            "_id": "IlKvw8xcHPqfERs6"
        },
        {
            "email": "melvin.bradtke@yahoo.com",
            "password": "teste",
            "nome": "Brande Jaskolski",
            "administrador": "true",
            "_id": "JAC6OsG5IscTBkCy"
        },
        {
            "nome": "Nathan Silva",
            "email": "nathan1590@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "JqQjx2Yh9yaRSsZM"
        },
        {
            "email": "misael@email.com",
            "password": "teste",
            "nome": "Misael Usuario",
            "administrador": "false",
            "_id": "K4kIqIHRQOpbnobJ"
        },
        {
            "email": "catherin.mraz@yahoo.com",
            "password": "teste",
            "nome": "Samella Denesik",
            "administrador": "true",
            "_id": "Kd4SkDL6WLHkwYQE"
        },
        {
            "email": "julio.stark@hotmail.com",
            "password": "teste",
            "nome": "Lucienne Torp",
            "administrador": "true",
            "_id": "L4Z8xHLxWh6HDFpv"
        },
        {
            "email": "william.koss@gmail.com",
            "password": "teste",
            "nome": "Forrest Klocko DDS",
            "administrador": "true",
            "_id": "LUAeNuhLIFpVCDOr"
        },
        {
            "email": "dreama.marquardt@yahoo.com",
            "password": "teste",
            "nome": "Truman Rosenbaum",
            "administrador": "true",
            "_id": "M5SqUoWeDUsWGYs7"
        },
        {
            "email": "piedad.ryan@gmail.com",
            "password": "teste",
            "nome": "Jake Zboncak",
            "administrador": "true",
            "_id": "M9SuFDzRUcftsOnO"
        },
        {
            "email": "ulrike.sanford@gmail.com",
            "password": "teste",
            "nome": "Dianna Buckridge",
            "administrador": "false",
            "_id": "NQJYLtsrC4nSV4u8"
        },
        {
            "email": "malcolm.schumm@gmail.com",
            "password": "teste",
            "nome": "Gail Rohan",
            "administrador": "true",
            "_id": "NZYE3LmsJkVCTZ2z"
        },
        {
            "email": "neda.hauck@hotmail.com",
            "password": "teste",
            "nome": "Ms. Dorthy Moore",
            "administrador": "true",
            "_id": "Nwe57Parz8ag5EUp"
        },
        {
            "email": "ralph.kessler@hotmail.com",
            "password": "teste",
            "nome": "Annalee Kuhlman",
            "administrador": "true",
            "_id": "OywVeumbbDBwpQNb"
        },
        {
            "nome": "Juliana Pereira",
            "email": "vagner.2a@gmail.com",
            "password": "123456",
            "administrador": "true",
            "_id": "PlwSpZeveRkcCy0D"
        },
        {
            "email": "erwin.feest@gmail.com",
            "password": "teste",
            "nome": "Ok Hane",
            "administrador": "false",
            "_id": "QrA5bHYrCmCBkuZk"
        },
        {
            "email": "dewayne.purdy@yahoo.com",
            "password": "teste",
            "nome": "Johna Berge DVM",
            "administrador": "true",
            "_id": "RMOabsoikuem4uLD"
        },
        {
            "email": "hilario.prosacco@hotmail.com",
            "password": "teste",
            "nome": "Miss Nina Zieme",
            "administrador": "true",
            "_id": "S6giOnRZwPUGo1ya"
        },
        {
            "email": "mia.greenfelder@yahoo.com",
            "password": "teste",
            "nome": "Chung Schulist",
            "administrador": "true",
            "_id": "SUHcoPRXTBNCkhix"
        },
        {
            "email": "sandie.mitchell@yahoo.com",
            "password": "teste",
            "nome": "Delma Streich",
            "administrador": "false",
            "_id": "SrVByQBDM7Ut3PaT"
        },
        {
           ... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220506 20:48:39.452" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:39.458" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:38.480" endtime="20220506 20:48:39.458"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:39.467" level="INFO">{'quantidade': 104, 'usuarios': [{'email': 'shawnna.ebert@gmail.com', 'password': 'teste', 'nome': 'Alexander Donnelly', 'administrador': 'true', '_id': '0nzZ5FrXJsWvaZHT'}, {'email': 'shelli.gibson@gmail.com', 'password': 'teste', 'nome': 'Abe Larson', 'administrador': 'true', '_id': '0u8ignFg7uF0P1QM'}, {'nome': 'Fulano da Silva', 'email': 'fulano@qa.com', 'password': 'teste', 'administrador': 'true', '_id': '0uxuPY0cbmQhpEz1'}, {'email': 'eduardo.white@gmail.com', 'password': 'teste', 'nome': 'Julienne Kirlin MD', 'administrador': 'true', '_id': '1XWezNXdLt1qgKJ7'}, {'nome': 'Testeee um', 'email': 'beltrano1234567899@qa.com.br', 'password': 'teste', 'administrador': 'true', '_id': '1ZVjeaxDrD77dqEH'}, {'email': 'amado.cruickshank@gmail.com', 'password': 'teste', 'nome': 'Gwyneth Kerluke', 'administrador': 'true', '_id': '3HZoTq3vQWbtYELk'}, {'email': 'deidre.kutch@hotmail.com', 'password': 'teste', 'nome': 'Deshawn Baumbach MD', 'administrador': 'true', '_id': '3cpBVH3loI64FyS0'}, {'email': 'jacquie.kunze@yahoo.com', 'password': 'teste', 'nome': 'Mr. Milton Kovacek', 'administrador': 'true', '_id': '6kh0bhAq7aFNxNQa'}, {'email': 'oswaldo.ondricka@gmail.com', 'password': 'teste', 'nome': 'Janell Lemke', 'administrador': 'true', '_id': '7WYSnyIxE5ovxibO'}, {'email': 'aldo.jacobson@hotmail.com', 'password': 'teste', 'nome': 'Estefana Moen', 'administrador': 'true', '_id': '7e97ozv3VXzV7oIu'}, {'email': 'lorita.greenfelder@gmail.com', 'password': 'teste', 'nome': 'Selena Runte', 'administrador': 'false', '_id': '8AWWE0uGK9NGA30v'}, {'email': 'clifton.corkery@gmail.com', 'password': 'teste', 'nome': 'Jude Gleason', 'administrador': 'true', '_id': 'A4Tqwl7jmTw8UlEd'}, {'email': 'alvina.gutkowski@gmail.com', 'password': 'teste', 'nome': 'Spencer Purdy', 'administrador': 'true', '_id': 'ACJBU5FEwR5UW5ru'}, {'email': 'glenn.kihn@hotmail.com', 'password': 'teste', 'nome': 'Pia Beahan', 'administrador': 'true', '_id': 'AXjX2Ltag0PRqplF'}, {'email': 'morton.beier@gmail.com', 'password': 'teste', 'nome': 'Margaretta Wiegand', 'administrador': 'true', '_id': 'BESZP8FqJIqX7M4J'}, {'email': 'versie.bailey@hotmail.com', 'password': 'teste', 'nome': 'Jacquie Graham', 'administrador': 'true', '_id': 'C8yXEVauJ4gdgwWf'}, {'email': 'althea.watsica@yahoo.com', 'password': 'teste', 'nome': 'Ms. Sherry McCullough', 'administrador': 'true', '_id': 'C9Wk8m3RE5ifPXol'}, {'email': 'manuela.wisozk@hotmail.com', 'password': 'teste', 'nome': 'Maurice Denesik', 'administrador': 'true', '_id': 'E772FO0ZO0U0Xoov'}, {'email': 'santo.stroman@gmail.com', 'password': 'teste', 'nome': 'Tracy Gerhold', 'administrador': 'true', '_id': 'EHJA62DqDrJRYBWK'}, {'email': 'carl.auer@gmail.com', 'password': 'teste', 'nome': 'Craig Langworth', 'administrador': 'true', '_id': 'FPHzzXtHu5swzoMc'}, {'email': 'arnulfo.weimann@hotmail.com', 'password': 'teste', 'nome': 'Gisele Langosh Jr.', 'administrador': 'true', '_id': 'FiIRePLkdr3iWoG7'}, {'email': 'kevin.wiegand@yahoo.com', 'password': 'teste', 'nome': 'Lucinda Considine', 'administrador': 'true', '_id': 'GW0J3j2r3mLjW0B5'}, {'email': 'raleigh.walsh@gmail.com', 'password': 'teste', 'nome': 'Alida Denesik', 'administrador': 'true', '_id': 'HvhKJlgnboK3Q5Qw'}, {'email': 'stacy.grady@gmail.com', 'password': 'teste', 'nome': 'Rosalinda Gottlieb Sr.', 'administrador': 'true', '_id': 'I0IcFz4vtgwzpELB'}, {'email': 'sang.crist@gmail.com', 'password': 'teste', 'nome': 'Melodi Gutmann', 'administrador': 'false', '_id': 'I459pWBPlAlftJRQ'}, {'email': 'joesph.kihn@gmail.com', 'password': 'teste', 'nome': 'Hang Dickinson', 'administrador': 'false', '_id': 'IZCyLQ7qnq16ugVg'}, {'email': 'joshua.mayert@hotmail.com', 'password': 'teste', 'nome': 'Willy Christiansen', 'administrador': 'true', '_id': 'IdlQsKnr5747SIT7'}, {'email': 'bradly.berge@gmail.com', 'password': 'teste', 'nome': 'Jerold Towne', 'administrador': 'false', '_id': 'IlKvw8xcHPqfERs6'}, {'email': 'melvin.bradtke@yahoo.com', 'password': 'teste', 'nome': 'Brande Jaskolski', 'administrador': 'true', '_id': 'JAC6OsG5IscTBkCy'}, {'nome': 'Nathan Silva', 'email': 'nathan1590@qa.com.br', 'password': 'teste', 'administrador': 'true', '_id': 'JqQjx2Yh9yaRSsZM'}, {'email': 'misael@email.com', 'password': 'teste', 'nome': 'Misael Usuario', 'administrador': 'false', '_id': 'K4kIqIHRQOpbnobJ'}, {'email': 'catherin.mraz@yahoo.com', 'password': 'teste', 'nome': 'Samella Denesik', 'administrador': 'true', '_id': 'Kd4SkDL6WLHkwYQE'}, {'email': 'julio.stark@hotmail.com', 'password': 'teste', 'nome': 'Lucienne Torp', 'administrador': 'true', '_id': 'L4Z8xHLxWh6HDFpv'}, {'email': 'william.koss@gmail.com', 'password': 'teste', 'nome': 'Forrest Klocko DDS', 'administrador': 'true', '_id': 'LUAeNuhLIFpVCDOr'}, {'email': 'dreama.marquardt@yahoo.com', 'password': 'teste', 'nome': 'Truman Rosenbaum', 'administrador': 'true', '_id': 'M5SqUoWeDUsWGYs7'}, {'email': 'piedad.ryan@gmail.com', 'password': 'teste', 'nome': 'Jake Zboncak', 'administrador': 'true', '_id': 'M9SuFDzRUcftsOnO'}, {'email': 'ulrike.sanford@gmail.com', 'password': 'teste', 'nome': 'Dianna Buckridge', 'administrador': 'false', '_id': 'NQJYLtsrC4nSV4u8'}, {'email': 'malcolm.schumm@gmail.com', 'password': 'teste', 'nome': 'Gail Rohan', 'administrador': 'true', '_id': 'NZYE3LmsJkVCTZ2z'}, {'email': 'neda.hauck@hotmail.com', 'password': 'teste', 'nome': 'Ms. Dorthy Moore', 'administrador': 'true', '_id': 'Nwe57Parz8ag5EUp'}, {'email': 'ralph.kessler@hotmail.com', 'password': 'teste', 'nome': 'Annalee Kuhlman', 'administrador': 'true', '_id': 'OywVeumbbDBwpQNb'}, {'nome': 'Juliana Pereira', 'email': 'vagner.2a@gmail.com', 'password': '123456', 'administrador': 'true', '_id': 'PlwSpZeveRkcCy0D'}, {'email': 'erwin.feest@gmail.com', 'password': 'teste', 'nome': 'Ok Hane', 'administrador': 'false', '_id': 'QrA5bHYrCmCBkuZk'}, {'email': 'dewayne.purdy@yahoo.com', 'password': 'teste', 'nome': 'Johna Berge DVM', 'administrador': 'true', '_id': 'RMOabsoikuem4uLD'}, {'email': 'hilario.prosacco@hotmail.com', 'password': 'teste', 'nome': 'Miss Nina Zieme', 'administrador': 'true', '_id': 'S6giOnRZwPUGo1ya'}, {'email': 'mia.greenfelder@yahoo.com', 'password': 'teste', 'nome': 'Chung Schulist', 'administrador': 'true', '_id': 'SUHcoPRXTBNCkhix'}, {'email': 'sandie.mitchell@yahoo.com', 'password': 'teste', 'nome': 'Delma Streich', 'administrador': 'false', '_id': 'SrVByQBDM7Ut3PaT'}, {'email': 'randolph.mante@hotmail.com', 'password': 'teste', 'nome': 'Conrad Zboncak', 'administrador': 'true', '_id': 'TCnBXx0SHgu3waQz'}, {'email': 'shaina.stoltenberg@yahoo.com', 'password': 'teste', 'nome': 'Edda Mayert', 'administrador': 'true', '_id': 'UBFksvrx6N1NiWzi'}, {'email': 'gaylord.runolfsson@yahoo.com', 'password': 'teste', 'nome': 'Mittie Davis', 'administrador': 'false', '_id': 'W4a1dcK2xRwKi92a'}, {'email': 'emmie.braun@yahoo.com', 'password': 'teste', 'nome': 'Ms. Dovie Weissnat', 'administrador': 'true', '_id': 'WJ75Db9Ewd9dQ1M1'}, {'email': 'misael@carro.com.br', 'password': 'teste', 'nome': 'Misael carro', 'administrador': 'true', '_id': 'WQamBvEMwxh9lxyY'}, {'email': 'tyson.monahan@yahoo.com', 'password': 'teste', 'nome': 'Luke Ondricka', 'administrador': 'true', '_id': 'XAKKvXTxaYoOxeBK'}, {'nome': 'Flu Fc', 'email': 'fc_tester7@qa.com', 'password': 'senha', 'administrador': 'true', '_id': 'YCssbv34SVdFe05b'}, {'email': 'misael@qa.com.br', 'password': 'teste', 'nome': 'Misael Reis', 'administrador': 'true', '_id': 'YuhPZAomXH4w7wGl'}, {'email': 'joseph.becker@yahoo.com', 'password': 'teste', 'nome': 'Kim Hagenes', 'administrador': 'true', '_id': 'YuvAI7eXQFMNenz0'}, {'email': 'larry.brekke@gmail.com', 'password': 'teste', 'nome': 'Dr. Clarinda Abshire', 'administrador': 'true', '_id': 'ZkFguzsr6h0OJfva'}, {'email': 'malinda.macejkovic@yahoo.com', 'password': 'teste', 'nome': 'Perry Casper', 'administrador': 'true', '_id': 'aQUO4Y7sBCwruonr'}, {'email': 'rosetta.watsica@hotmail.com', 'password': 'teste', 'nome': 'Dee Gaylord', 'administrador': 'true', '_id': 'az9jshNkcsFmhzRR'}, {'email': 'floyd.konopelski@gmail.com', 'password': 'teste', 'nome': 'Minh Spinka', 'administrador': 'true', '_id': 'bmtou7NR0TFhfo3M'}, {'email': 'batatinhafrita@123.com.br', 'password': 'teste', 'nome': 'Ms. Adelaide Parisian', 'administrador': 'true', '_id': 'c31yjQNKC0K7NlyW'}, {'email': 'len.rosenbaum@hotmail.com', 'password': 'teste', 'nome': 'Cammie Bayer II', 'administrador': 'true', '_id': 'dHymmczNWY1ClZ9q'}, {'email': 'giuseppe.koepp@gmail.com', 'password': 'teste', 'nome': 'Anton Corkery', 'administrador': 'true', '_id': 'dS0IraDtUa27Xfhj'}, {'email': 'jetta.veum@hotmail.com', 'password': 'teste', 'nome': 'Wendy Miller', 'administrador': 'true', '_id': 'dazhSFR9QfKGGAb2'}, {'email': 'willodean.west@yahoo.com', 'password': 'teste', 'nome': 'Charlott Sauer Jr.', 'administrador': 'true', '_id': 'eB1jR5txYEiKnl6f'}, {'email': 'edda.tremblay@hotmail.com', 'password': 'teste', 'nome': 'Lucius Crooks', 'administrador': 'false', '_id': 'f8xVtqCjUYr7oR7U'}, {'email': 'alma.hane@gmail.com', 'password': 'teste', 'nome': 'Josiah MacGyver', 'administrador': 'true', '_id': 'fGt8qM4fYMk7iCLh'}, {'email': 'elva.white@yahoo.com', 'password': 'teste', 'nome': 'Buster Balistreri', 'administrador': 'true', '_id': 'fYnKy4wmEVrl6hTq'}, {'email': 'shanel.konopelski@gmail.com', 'password': 'teste', 'nome': 'Cyndy Mraz MD', 'administrador': 'true', '_id': 'gHnKh4YVoo4Ow52L'}, {'email': 'desiree.hauck@yahoo.com', 'password': 'teste', 'nome': 'Ardelle Spinka', 'administrador': 'true', '_id': 'gu0QUj6It1qmXCp2'}, {'email': 'maegan.brekke@hotmail.com', 'password': 'teste', 'nome': 'Angel Fay', 'administrador': 'true', '_id': 'hDwIp21TwfqCHfJt'}, {'email': 'johnathon.wyman@hotmail.com', 'password': 'teste', 'nome': 'Ms. Johanna Roob', 'administrador': 'true', '_id': 'hqZRmjOaQ4rolVKo'}, {'email': 'melvina.bode@hotmail.com', 'password': 'teste', 'nome': 'Myong Schultz', 'administrador': 'true', '_id': 'i9JakArLNPX27H8b'}, {'email': 'wilton.fadel@gmail.com', 'password': 'teste', 'nome': 'Graig Kihn PhD', 'administrador': 'true', '_id': 'iGEyP8oTmyu9apzW'}, {'email': 'kendall.rau@hotmail.com', 'password': 'teste', 'nome': 'Kristofer Kub', 'administrador': 'true', '_id': 'iLSRdyrdOWNftvIr'}, {'email': 'mickie.windler@yahoo.com', 'password': 'teste', 'nome': 'Alta Ledner', 'administrador': 'true', '_id': 'j6mRILWvLMs69HJt'}, {'email': 'salley.klocko@hotmail.com', 'password': 'teste', 'nome': 'Sal Rolfson', 'administrador': 'true', '_id': 'k4AnBKPSCrx2fmOx'}, {'email': 'nolan.runolfsson@hotmail.com', 'password': 'teste', 'nome': 'Obdulia Pfeffer', 'administrador': 'true', '_id': 'kOf9U46eRZcuRK2b'}, {'email': 'jame.gerlach@hotmail.com', 'password': 'teste', 'nome': 'Jennine Boyle', 'administrador': 'true', '_id': 'ljbEhAJ6IBzDc4AR'}, {'email': 'dorsey.spinka@hotmail.com', 'password': 'teste', 'nome': 'Kerrie Halvorson DDS', 'administrador': 'true', '_id': 'mMdpL6Qj9emeAOPC'}, {'email': 'trena.beier@hotmail.com', 'password': 'teste', 'nome': 'Cira Zboncak Jr.', 'administrador': 'true', '_id': 'mTj4OJStJuAI4no3'}, {'email': 'xavier.goyette@yahoo.com', 'password': 'teste', 'nome': 'Pasquale Marquardt', 'administrador': 'true', '_id': 'myPpMZTDwlaITn5N'}, {'email': 'paul.hessel@yahoo.com', 'password': 'teste', 'nome': 'Genevie Koch', 'administrador': 'true', '_id': 'mznwgHtLokskPJuZ'}, {'email': 'ashley.dubuque@hotmail.com', 'password': 'teste', 'nome': 'Mitzi Hane', 'administrador': 'true', '_id': 'nS7IArgwDKOOTDP4'}, {'email': 'emmitt.towne@gmail.com', 'password': 'teste', 'nome': 'Latoyia Ernser', 'administrador': 'true', '_id': 'nvOOvSkFriH97AsX'}, {'email': 'ambrose.gaylord@hotmail.com', 'password': 'teste', 'nome': 'Gema Ward', 'administrador': 'true', '_id': 'o155RCaq7u7Kv2ul'}, {'email': 'glynda.fay@yahoo.com', 'password': 'teste', 'nome': 'Felton Smitham V', 'administrador': 'true', '_id': 'oTj6e7YAqPLSz8lk'}, {'email': 'nicolle.luettgen@hotmail.com', 'password': 'teste', 'nome': 'Yasuko King', 'administrador': 'true', '_id': 'pm6ggdb6a2HQZYMR'}, {'email': 'levi.hintz@yahoo.com', 'password': 'teste', 'nome': 'Halina Tromp', 'administrador': 'true', '_id': 'pxCmiGJu2Ja2vVA8'}, {'email': 'clemente.hoppe@yahoo.com', 'password': 'teste', 'nome': 'Erwin Rodriguez', 'administrador': 'true', '_id': 'qUzCLCihulnTW7t2'}, {'email': 'cole.hahn@gmail.com', 'password': 'teste', 'nome': 'Cammie Bednar', 'administrador': 'true', '_id': 'qlo9VvnhMXFjgfq1'}, {'email': 'maud.kutch@gmail.com', 'password': 'teste', 'nome': 'Oma Legros MD', 'administrador': 'true', '_id': 'qnpa5MhWEAlI3LdK'}, {'email': 'fae.abbott@gmail.com', 'password': 'teste', 'nome': 'Kristopher Grady', 'administrador': 'false', '_id': 'sHwZDgu29WIDlk4P'}, {'email': 'salina.hoppe@hotmail.com', 'password': 'teste', 'nome': 'Tari Haley I', 'administrador': 'true', '_id': 't1pCeaCMbhdi9yyT'}, {'nome': 'Misael Usuario', 'email': 'misael@gmail.com', 'password': 'teste', 'administrador': 'false', '_id': 'tmPITr6wU1OmKLYz'}, {'email': 'ming.walker@hotmail.com', 'password': 'teste', 'nome': 'Mr. Christopher Prosacco', 'administrador': 'true', '_id': 'tuT56zcoCpI7IEiB'}, {'email': 'francina.kreiger@hotmail.com', 'password': 'teste', 'nome': 'Martha Dare Sr.', 'administrador': 'true', '_id': 'u4XcoHvcIolmZBn2'}, {'email': 'wilburn.lebsack@yahoo.com', 'password': 'teste', 'nome': 'Alexis Farrell PhD', 'administrador': 'true', '_id': 'uLTKDTccoZ7cIFIx'}, {'email': 'pete.miller@gmail.com', 'password': 'teste', 'nome': 'June Walsh', 'administrador': 'true', '_id': 'v1SBFeUSJ2T61Inq'}, {'email': 'elaine.johnston@yahoo.com', 'password': 'teste', 'nome': 'Amie Bernhard', 'administrador': 'true', '_id': 'wukYhzVGvGhRjmrm'}, {'email': 'rashad.donnelly@gmail.com', 'password': 'teste', 'nome': 'Cindy Gutkowski IV', 'administrador': 'true', '_id': 'xPzGPVO6oDGFKjL8'}, {'email': 'chuck.daniel@gmail.com', 'password': 'teste', 'nome': 'Colin Gaylord', 'administrador': 'false', '_id': 'xfdc4HUPEjJDCZhL'}, {'email': 'amelia.feeney@gmail.com', 'password': 'teste', 'nome': 'Ms. Faustina Nolan', 'administrador': 'false', '_id': 'zC8TBWpJjflruvCQ'}, {'email': 'leland.bergstrom@gmail.com', 'password': 'teste', 'nome': 'Sherlyn Kovacek I', 'administrador': 'true', '_id': 'zPHfUyK4iV3pluQz'}, {'email': 'chadwick.dickinson@yahoo.com', 'password': 'teste', 'nome': 'Kandy Baumbach', 'administrador': 'true', '_id': 'zbgs4yP0n4sd073Y'}]}</msg>
<status status="PASS" starttime="20220506 20:48:39.459" endtime="20220506 20:48:39.485"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220506 20:48:39.490" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.486" endtime="20220506 20:48:39.490"/>
</kw>
<status status="PASS" starttime="20220506 20:48:38.477" endtime="20220506 20:48:39.493"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>200</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_INTENDED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220506 20:48:39.507" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.501" endtime="20220506 20:48:39.507"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.498" endtime="20220506 20:48:39.508"/>
</kw>
<status status="PASS" starttime="20220506 20:48:38.474" endtime="20220506 20:48:39.524"/>
</test>
<test id="s1-s1-t2" name="CT02: List User by param ID" line="15">
<kw name="List user by ID" library="UsuarioKW">
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:39.551" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:39.548" endtime="20220506 20:48:39.551"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios/${ID_FULANO_DA_SILVA}</arg>
<arg>headers=${header}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:39.783" level="INFO">GET Request : url=https://serverest.dev/usuarios/0uxuPY0cbmQhpEz1 
 path_url=/usuarios/0uxuPY0cbmQhpEz1 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20220506 20:48:39.783" level="INFO">GET Response : url=https://serverest.dev/usuarios/0uxuPY0cbmQhpEz1 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '6937e975-9d33-40b8-81ca-f5d5ff005559', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '73fdb0455c5007d74aff6f2ebc40a866', 'Date': 'Fri, 06 May 2022 23:49:25 GMT', 'Server': 'Google Frontend', 'Content-Length': '148'} 
 body={
    "nome": "Fulano da Silva",
    "email": "fulano@qa.com",
    "password": "teste",
    "administrador": "true",
    "_id": "0uxuPY0cbmQhpEz1"
} 
 </msg>
<msg timestamp="20220506 20:48:39.784" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:39.785" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.552" endtime="20220506 20:48:39.785"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:39.789" level="INFO">{'nome': 'Fulano da Silva', 'email': 'fulano@qa.com', 'password': 'teste', 'administrador': 'true', '_id': '0uxuPY0cbmQhpEz1'}</msg>
<status status="PASS" starttime="20220506 20:48:39.786" endtime="20220506 20:48:39.790"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220506 20:48:39.791" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.790" endtime="20220506 20:48:39.792"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.546" endtime="20220506 20:48:39.792"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>200</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_INTENDED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220506 20:48:39.799" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.796" endtime="20220506 20:48:39.800"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.794" endtime="20220506 20:48:39.800"/>
</kw>
<kw name="Validate User Data Fulano da Silva" library="UsuarioKW">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["nome"]}</arg>
<arg>${NAME_FULANO_SILVA}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:39.802" endtime="20220506 20:48:39.806"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["administrador"]}</arg>
<arg>${ADM_FULANO_SILVA}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:39.806" endtime="20220506 20:48:39.809"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["_id"]}</arg>
<arg>${ID_FULANO_DA_SILVA}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:39.810" endtime="20220506 20:48:39.814"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.801" endtime="20220506 20:48:39.815"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.543" endtime="20220506 20:48:39.817"/>
</test>
<test id="s1-s1-t3" name="CT03: List User by param NAME" line="20">
<kw name="List user by NAME" library="UsuarioKW">
<arg>${NAME_FULANO_SILVA}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:39.831" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:39.829" endtime="20220506 20:48:39.831"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios</arg>
<arg>?nome=${NAME_FULANO_SILVA}</arg>
<arg>headers=${header}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:39.839" level="FAIL">TypeError: request() got an unexpected keyword argument '?nome'</msg>
<status status="FAIL" starttime="20220506 20:48:39.832" endtime="20220506 20:48:39.846"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20220506 20:48:39.848" endtime="20220506 20:48:39.852"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20220506 20:48:39.853" endtime="20220506 20:48:39.853"/>
</kw>
<status status="FAIL" starttime="20220506 20:48:39.826" endtime="20220506 20:48:39.859"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>200</arg>
<status status="NOT RUN" starttime="20220506 20:48:39.865" endtime="20220506 20:48:39.866"/>
</kw>
<kw name="Validate User Data Fulano da Silva" library="UsuarioKW">
<status status="NOT RUN" starttime="20220506 20:48:39.867" endtime="20220506 20:48:39.868"/>
</kw>
<status status="FAIL" starttime="20220506 20:48:39.823" endtime="20220506 20:48:39.871">TypeError: request() got an unexpected keyword argument '?nome'</status>
</test>
<test id="s1-s1-t4" name="CT04: Registering users" line="25">
<kw name="Register User" library="UsuarioKW">
<arg>${NAME_NEW_USER}</arg>
<arg>${EMAIL_NEW_USER}</arg>
<arg>${PASSWORD_NEW_USER}</arg>
<arg>${ADM_FULANO_SILVA}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:39.897" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:39.896" endtime="20220506 20:48:39.898"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios</arg>
<arg>data={"nome": "${NAME_NEW_USER}","email": "${EMAIL_NEW_USER}","password": "${PASSWORD_NEW_USER}","administrador": "${ADM_FULANO_SILVA}"}</arg>
<arg>headers=${header}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:40.085" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json', 'Content-Length': '92'} 
 body={"nome": "Flu Fc","email": "fc_tester11@qa.com","password": "senha","administrador": "true"} 
 </msg>
<msg timestamp="20220506 20:48:40.086" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '4db4c33e-2999-4b8e-a6b7-4a423be973cb', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c81c09b0bf051c8e706c5bb2cdaf3e13', 'Date': 'Fri, 06 May 2022 23:49:25 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "izl8ydhg3zLpsOP4"
} 
 </msg>
<msg timestamp="20220506 20:48:40.086" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:40.089" level="INFO">${RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:39.898" endtime="20220506 20:48:40.089"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.095" level="INFO">{'message': 'Cadastro realizado com sucesso', '_id': 'izl8ydhg3zLpsOP4'}</msg>
<status status="PASS" starttime="20220506 20:48:40.090" endtime="20220506 20:48:40.095"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${_ID}</arg>
<arg>${response.json()['_id']}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220506 20:48:40.106" level="INFO">${_ID} = izl8ydhg3zLpsOP4</msg>
<status status="PASS" starttime="20220506 20:48:40.096" endtime="20220506 20:48:40.106"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${_ID}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.108" level="INFO">izl8ydhg3zLpsOP4</msg>
<status status="PASS" starttime="20220506 20:48:40.107" endtime="20220506 20:48:40.108"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220506 20:48:40.110" level="INFO">${RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.109" endtime="20220506 20:48:40.111"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["message"]}</arg>
<arg>${MSG_SUCCESS_REGISTER}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:40.111" endtime="20220506 20:48:40.116"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.890" endtime="20220506 20:48:40.117"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>201</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_INTENDED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220506 20:48:40.130" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.125" endtime="20220506 20:48:40.130"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.123" endtime="20220506 20:48:40.131"/>
</kw>
<status status="PASS" starttime="20220506 20:48:39.881" endtime="20220506 20:48:40.138"/>
</test>
<test id="s1-s1-t5" name="CT05: Registering User with registered email" line="29">
<kw name="Register User with registered email" library="UsuarioKW">
<arg>${NAME_NEW_USER}</arg>
<arg>${EMAIL_NEW_USER_EXISTING}</arg>
<arg>${PASSWORD_NEW_USER}</arg>
<arg>${ADM_FULANO_SILVA}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:40.154" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:40.153" endtime="20220506 20:48:40.155"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios</arg>
<arg>data={"nome": "${NAME_NEW_USER}","email": "${EMAIL_NEW_USER_EXISTING}","password": "${PASSWORD_NEW_USER}","administrador": "${ADM_FULANO_SILVA}"}</arg>
<arg>headers=${header}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:40.327" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json', 'Content-Length': '87'} 
 body={"nome": "Flu Fc","email": "fulano@qa.com","password": "senha","administrador": "true"} 
 </msg>
<msg timestamp="20220506 20:48:40.327" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=400, reason=Bad Request 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '707cb05d-195d-4548-91f7-998839b48b30', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '8945e0b19e02d3b203dd40e7cbd30566', 'Date': 'Fri, 06 May 2022 23:49:25 GMT', 'Server': 'Google Frontend', 'Content-Length': '53'} 
 body={
    "message": "Este email já está sendo usado"
} 
 </msg>
<msg timestamp="20220506 20:48:40.327" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:40.330" level="FAIL">HTTPError: 400 Client Error: Bad Request for url: https://serverest.dev/usuarios</msg>
<status status="FAIL" starttime="20220506 20:48:40.155" endtime="20220506 20:48:40.332"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20220506 20:48:40.333" endtime="20220506 20:48:40.333"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20220506 20:48:40.334" endtime="20220506 20:48:40.334"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["message"]}</arg>
<arg>${MSG_ERROR_EMAIL_REGISTERED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20220506 20:48:40.334" endtime="20220506 20:48:40.334"/>
</kw>
<status status="FAIL" starttime="20220506 20:48:40.149" endtime="20220506 20:48:40.336"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>400</arg>
<status status="NOT RUN" starttime="20220506 20:48:40.338" endtime="20220506 20:48:40.338"/>
</kw>
<status status="FAIL" starttime="20220506 20:48:40.147" endtime="20220506 20:48:40.340">HTTPError: 400 Client Error: Bad Request for url: https://serverest.dev/usuarios</status>
</test>
<test id="s1-s1-t6" name="CT06: Changing User" line="33">
<kw name="Change User" library="UsuarioKW">
<arg>${NAME_USER_CHANGED}</arg>
<arg>${EMAIL_USER_CHANGED}</arg>
<arg>${PASSWORD_USER_CHANGED}</arg>
<arg>${ADM_FULANO_SILVA}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:40.349" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:40.348" endtime="20220506 20:48:40.349"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios/${_ID}</arg>
<arg>data={"nome": "${NAME_USER_CHANGED}","email": "${EMAIL_USER_CHANGED}","password": "${PASSWORD_USER_CHANGED}","administrador": "${ADM_FULANO_SILVA}"}</arg>
<arg>headers=${header}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:40.531" level="INFO">PUT Request : url=https://serverest.dev/usuarios/izl8ydhg3zLpsOP4 
 path_url=/usuarios/izl8ydhg3zLpsOP4 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json', 'Content-Length': '100'} 
 body={"nome": "Fluminense Fc","email": "flu_tester3@qa.com","password": "senha2","administrador": "true"} 
 </msg>
<msg timestamp="20220506 20:48:40.532" level="INFO">PUT Response : url=https://serverest.dev/usuarios/izl8ydhg3zLpsOP4 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '1a4f11ba-c874-4a63-9a47-6d80b2bfc73c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '3aa09919497e6e8b43e9ced46951330c', 'Date': 'Fri, 06 May 2022 23:49:25 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20220506 20:48:40.532" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:40.534" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.349" endtime="20220506 20:48:40.534"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.537" level="INFO">{'message': 'Registro alterado com sucesso'}</msg>
<status status="PASS" starttime="20220506 20:48:40.534" endtime="20220506 20:48:40.537"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${_ID}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.538" level="INFO">izl8ydhg3zLpsOP4</msg>
<status status="PASS" starttime="20220506 20:48:40.538" endtime="20220506 20:48:40.538"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220506 20:48:40.539" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.539" endtime="20220506 20:48:40.540"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["message"]}</arg>
<arg>${MSG_SUCCESS_CHANGED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:40.540" endtime="20220506 20:48:40.543"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.346" endtime="20220506 20:48:40.544"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>200</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_INTENDED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220506 20:48:40.548" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.546" endtime="20220506 20:48:40.548"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.545" endtime="20220506 20:48:40.549"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.344" endtime="20220506 20:48:40.550"/>
</test>
<test id="s1-s1-t7" name="CT07: Deleting Users" line="37">
<kw name="Delete User" library="UsuarioKW">
<kw name="Create Dictionary" library="BuiltIn">
<var>${header}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220506 20:48:40.591" level="INFO">${header} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220506 20:48:40.590" endtime="20220506 20:48:40.591"/>
</kw>
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>serveRest</arg>
<arg>/usuarios/${_ID}</arg>
<arg>headers=${header}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20220506 20:48:40.795" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/izl8ydhg3zLpsOP4 
 path_url=/usuarios/izl8ydhg3zLpsOP4 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220506 20:48:40.795" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/izl8ydhg3zLpsOP4 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'f9e4e957-ffe9-4359-abd4-c4a6f0a5f6e4', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a549292c1179c0ab47337d18f2eed10a', 'Date': 'Fri, 06 May 2022 23:49:26 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20220506 20:48:40.796" level="INFO">c:\users\fc\appdata\local\programs\python\python38\lib\site-packages\urllib3\connectionpool.py:1043: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220506 20:48:40.797" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.591" endtime="20220506 20:48:40.797"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${RESPONSE.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.799" level="INFO">{'message': 'Registro excluído com sucesso'}</msg>
<status status="PASS" starttime="20220506 20:48:40.797" endtime="20220506 20:48:40.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${_ID}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220506 20:48:40.800" level="INFO">izl8ydhg3zLpsOP4</msg>
<status status="PASS" starttime="20220506 20:48:40.800" endtime="20220506 20:48:40.800"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220506 20:48:40.801" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.800" endtime="20220506 20:48:40.801"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.json()["message"]}</arg>
<arg>${MSG_SUCCESS_DELETED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220506 20:48:40.802" endtime="20220506 20:48:40.804"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.589" endtime="20220506 20:48:40.804"/>
</kw>
<kw name="Validate Status Code" library="UsuarioKW">
<arg>200</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_INTENDED}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220506 20:48:40.808" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220506 20:48:40.806" endtime="20220506 20:48:40.808"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.805" endtime="20220506 20:48:40.808"/>
</kw>
<status status="PASS" starttime="20220506 20:48:40.587" endtime="20220506 20:48:40.809"/>
</test>
<doc>Testes de API para Usuarios</doc>
<status status="FAIL" starttime="20220506 20:48:38.110" endtime="20220506 20:48:40.813"/>
</suite>
<status status="FAIL" starttime="20220506 20:48:38.026" endtime="20220506 20:48:40.819"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="2" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="2" skip="0" id="s1" name="Usuarios">Usuarios</stat>
<stat pass="5" fail="2" skip="0" id="s1-s1" name="TestUsuarios">Usuarios.TestUsuarios</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220506 20:48:38.120" level="ERROR">Error in file 'C:\STC\robot-api-stc\resources\usuarios\SettingsUsuarios.robot' on line 3: Setting 'Suite Setup' is not allowed in resource file.</msg>
<msg timestamp="20220506 20:48:38.464" level="ERROR">Error in file 'C:\STC\robot-api-stc\resources\usuarios\UsuarioKW.robot' on line 5: Importing library 'FakerLibrary' failed: ModuleNotFoundError: No module named 'FakerLibrary'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Users\FC\AppData\Local\Programs\Python\Python38\Scripts\robot.exe
  c:\users\fc\appdata\local\programs\python\python38\python38.zip
  c:\users\fc\appdata\local\programs\python\python38\DLLs
  c:\users\fc\appdata\local\programs\python\python38\lib
  c:\users\fc\appdata\local\programs\python\python38
  c:\users\fc\appdata\local\programs\python\python38\lib\site-packages</msg>
</errors>
</robot>
