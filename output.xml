<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0.1 (Python 3.8.10 on linux)" generated="20220525 21:51:51.716" rpa="false" schemaversion="3">
<suite id="s1" name="Robot-Api-Stc" source="/home/runner/work/robot-api-stc/robot-api-stc">
<suite id="s1-s1" name="Serverest" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest">
<suite id="s1-s1-s1" name="Tests" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest/tests">
<suite id="s1-s1-s1-s1" name="Schema-Tests" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest/tests/schema-tests">
<suite id="s1-s1-s1-s1-s1" name="TestCarrinhosSchema" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest/tests/schema-tests/TestCarrinhosSchema.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Validate car API schema" line="9">
<kw name="Search All Carts" library="CarrinhoKW">
<doc>Used to search for all existing carts.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220525 21:51:52.088" level="INFO">${headers} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220525 21:51:52.087" endtime="20220525 21:51:52.088"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>serveRest</arg>
<arg>${URL_DEV}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20220525 21:51:52.088" level="INFO">Creating Session using : alias=serveRest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20220525 21:51:52.088" endtime="20220525 21:51:52.088"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serveRest</arg>
<arg>/carrinhos</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220525 21:51:52.389" level="INFO">GET Request : url=https://serverest.dev/carrinhos 
 path_url=/carrinhos 
 headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20220525 21:51:52.389" level="INFO">GET Response : url=https://serverest.dev/carrinhos 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '1afd3b25-3b3f-4785-b286-5e4c7ab7b0cf', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '94b3a76958a6399206cf6a917b29097d;o=1', 'Date': 'Wed, 25 May 2022 21:51:52 GMT', 'Server': 'Google Frontend', 'Content-Length': '595'} 
 body={
    "quantidade": 1,
    "carrinhos": [
        {
            "produtos": [
                {
                    "idProduto": "BeeJh5lz3k6kSIzA",
                    "quantidade": 2,
                    "precoUnitario": 470
                },
                {
                    "idProduto": "K6leHdftCeOJj8BJ",
                    "quantidade": 1,
                    "precoUnitario": 5240
                }
            ],
            "precoTotal": 6180,
            "quantidadeTotal": 3,
            "idUsuario": "oUb7aGkMtSEPf6BZ",
            "_id": "qbMqntef4iTOwWfg"
        }
    ]
} 
 </msg>
<msg timestamp="20220525 21:51:52.389" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.089" endtime="20220525 21:51:52.389"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220525 21:51:52.390" level="INFO">&lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.389" endtime="20220525 21:51:52.390"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220525 21:51:52.390" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.390" endtime="20220525 21:51:52.390"/>
</kw>
<status status="PASS" starttime="20220525 21:51:52.087" endtime="20220525 21:51:52.390"/>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20220525 21:51:52.391" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.390" endtime="20220525 21:51:52.391"/>
</kw>
<kw name="Validate Jsonschema From File" library="JsonValidator">
<arg>${response.json()}</arg>
<arg>${CART_SCHEMA}</arg>
<doc>Validate JSON according to schema, loaded from a file.</doc>
<status status="PASS" starttime="20220525 21:51:52.391" endtime="20220525 21:51:52.393"/>
</kw>
<tag>@regression</tag>
<tag>@schema</tag>
<tag>@schema_tests</tag>
<status status="PASS" starttime="20220525 21:51:52.086" endtime="20220525 21:51:52.394"/>
</test>
<doc>Car test for schema API</doc>
<status status="PASS" starttime="20220525 21:51:51.739" endtime="20220525 21:51:52.394"/>
</suite>
<suite id="s1-s1-s1-s1-s2" name="TestProdutosSchema" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest/tests/schema-tests/TestProdutosSchema.robot">
<test id="s1-s1-s1-s1-s2-t1" name="Validate product API schema" line="9">
<kw name="Search All Products" library="ProdutoKW">
<doc>Used to search for all existing products.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220525 21:51:52.400" level="INFO">${headers} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220525 21:51:52.399" endtime="20220525 21:51:52.400"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>serveRest</arg>
<arg>${URL_DEV}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20220525 21:51:52.400" level="INFO">Creating Session using : alias=serveRest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20220525 21:51:52.400" endtime="20220525 21:51:52.400"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serveRest</arg>
<arg>/produtos</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220525 21:51:52.499" level="INFO">GET Request : url=https://serverest.dev/produtos 
 path_url=/produtos 
 headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20220525 21:51:52.499" level="INFO">GET Response : url=https://serverest.dev/produtos 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'a1bdd992-f680-4819-8b6d-c99fc26ade19', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '7c08e0f7a4ee186987db521555797cae', 'Date': 'Wed, 25 May 2022 21:51:52 GMT', 'Server': 'Google Frontend', 'Content-Length': '435'} 
 body={
    "quantidade": 2,
    "produtos": [
        {
            "nome": "Logitech MX Vertical",
            "preco": 470,
            "descricao": "Mouse",
            "quantidade": 382,
            "_id": "BeeJh5lz3k6kSIzA"
        },
        {
            "nome": "Samsung 60 polegadas",
            "preco": 5240,
            "descricao": "TV",
            "quantidade": 49977,
            "_id": "K6leHdftCeOJj8BJ"
        }
    ]
} 
 </msg>
<msg timestamp="20220525 21:51:52.499" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.400" endtime="20220525 21:51:52.499"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220525 21:51:52.500" level="INFO">&lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.500" endtime="20220525 21:51:52.500"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220525 21:51:52.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.500" endtime="20220525 21:51:52.500"/>
</kw>
<status status="PASS" starttime="20220525 21:51:52.399" endtime="20220525 21:51:52.500"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220525 21:51:52.501" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.501" endtime="20220525 21:51:52.501"/>
</kw>
<kw name="Validate Jsonschema From File" library="JsonValidator">
<arg>${response.json()}</arg>
<arg>${PRODUCT_SCHEMA}</arg>
<doc>Validate JSON according to schema, loaded from a file.</doc>
<status status="PASS" starttime="20220525 21:51:52.501" endtime="20220525 21:51:52.503"/>
</kw>
<tag>@regression</tag>
<tag>@schema</tag>
<tag>@schema_tests</tag>
<status status="PASS" starttime="20220525 21:51:52.399" endtime="20220525 21:51:52.503"/>
</test>
<doc>Product test for schema API</doc>
<status status="PASS" starttime="20220525 21:51:52.395" endtime="20220525 21:51:52.504"/>
</suite>
<suite id="s1-s1-s1-s1-s3" name="TestUsuariosSchema" source="/home/runner/work/robot-api-stc/robot-api-stc/serverest/tests/schema-tests/TestUsuariosSchema.robot">
<test id="s1-s1-s1-s1-s3-t1" name="Validate user API schema" line="9">
<kw name="Search All Users" library="UsuarioKW">
<doc>Used to search for all existing users.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>content-type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220525 21:51:52.509" level="INFO">${headers} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20220525 21:51:52.509" endtime="20220525 21:51:52.509"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>serveRest</arg>
<arg>${URL_DEV}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20220525 21:51:52.509" level="INFO">Creating Session using : alias=serveRest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20220525 21:51:52.509" endtime="20220525 21:51:52.509"/>
</kw>
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serveRest</arg>
<arg>/usuarios</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220525 21:51:52.607" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20220525 21:51:52.607" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'a881266b-145c-47e7-9c28-909572dacce1', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'b6d406941bce871154655616e535bf54', 'Date': 'Wed, 25 May 2022 21:51:52 GMT', 'Server': 'Google Frontend', 'Content-Length': '253'} 
 body={
    "quantidade": 1,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        }
    ]
} 
 </msg>
<msg timestamp="20220525 21:51:52.607" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.510" endtime="20220525 21:51:52.608"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220525 21:51:52.608" level="INFO">&lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.608" endtime="20220525 21:51:52.608"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20220525 21:51:52.608" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.608" endtime="20220525 21:51:52.608"/>
</kw>
<status status="PASS" starttime="20220525 21:51:52.508" endtime="20220525 21:51:52.609"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220525 21:51:52.609" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220525 21:51:52.609" endtime="20220525 21:51:52.609"/>
</kw>
<kw name="Validate Jsonschema From File" library="JsonValidator">
<arg>${response.json()}</arg>
<arg>${USER_SCHEMA}</arg>
<doc>Validate JSON according to schema, loaded from a file.</doc>
<status status="PASS" starttime="20220525 21:51:52.609" endtime="20220525 21:51:52.612"/>
</kw>
<tag>@regression</tag>
<tag>@schema</tag>
<tag>@schema_tests</tag>
<status status="PASS" starttime="20220525 21:51:52.508" endtime="20220525 21:51:52.612"/>
</test>
<doc>User test for schema API</doc>
<status status="PASS" starttime="20220525 21:51:52.504" endtime="20220525 21:51:52.612"/>
</suite>
<doc>API for schema tests</doc>
<status status="PASS" starttime="20220525 21:51:51.738" endtime="20220525 21:51:52.613"/>
</suite>
<status status="PASS" starttime="20220525 21:51:51.737" endtime="20220525 21:51:52.614"/>
</suite>
<status status="PASS" starttime="20220525 21:51:51.735" endtime="20220525 21:51:52.615"/>
</suite>
<status status="PASS" starttime="20220525 21:51:51.718" endtime="20220525 21:51:52.616"/>
</suite>
<statistics>
<total>
<stat pass="3" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="0" skip="0">@regression</stat>
<stat pass="3" fail="0" skip="0">@schema</stat>
<stat pass="3" fail="0" skip="0">@schema_tests</stat>
</tag>
<suite>
<stat pass="3" fail="0" skip="0" id="s1" name="Robot-Api-Stc">Robot-Api-Stc</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1" name="Serverest">Robot-Api-Stc.Serverest</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1-s1" name="Tests">Robot-Api-Stc.Serverest.Tests</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1-s1-s1" name="Schema-Tests">Robot-Api-Stc.Serverest.Tests.Schema-Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1-s1-s1" name="TestCarrinhosSchema">Robot-Api-Stc.Serverest.Tests.Schema-Tests.TestCarrinhosSchema</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1-s1-s2" name="TestProdutosSchema">Robot-Api-Stc.Serverest.Tests.Schema-Tests.TestProdutosSchema</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1-s1-s3" name="TestUsuariosSchema">Robot-Api-Stc.Serverest.Tests.Schema-Tests.TestUsuariosSchema</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
